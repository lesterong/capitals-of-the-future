---
import HeaderLink from "./HeaderLink.astro";
import { SITE_TITLE } from "../consts";
import {
  Bars3Icon,
  ChevronDownIcon,
  XMarkIcon,
} from "@heroicons/react/24/solid";
import NavbarDropdown from "./NavbarDropdown";
import { getEntry } from "astro:content";
const { pathname } = Astro.url;

const cities = (await getEntry("city", "cities")).data.cities.map((city) => city.name);
---
<div
  class="flex justify-center max-w-6xl px-2 mx-auto fixed md:sticky top-0 w-full left-0 right-0 z-[9999]"
>
  <nav
    id="nav"
    class="flex border border-gray-400/30 flex-col w-full mt-2 px-4 py-2 shadow-sm bg-gray-50/70 backdrop-blur-xl rounded-xl"
  >
    <div class="flex justify-between items-center">
      <h2 class="font-bold text-lg uppercase text-gray-900">
        <a href="/">{SITE_TITLE}</a>
      </h2>
      <div class="flex space-x-6">
        <button
          id="menu-trigger"
          class="grid grid-cols-1 grid-rows-1 h-6 w-6 md:hidden text-gray-900/60 hover:text-gray-900"
        >
          <Bars3Icon
            className="transition-opacity duration-300 ease-in-out size-6"
          />
          <XMarkIcon
            className="transition-opacity duration-300 ease-in-out opacity-0 size-6"
          />
          <span class="sr-only">Menu</span>
        </button>
        <HeaderLink href="/about" class="hidden md:block">About</HeaderLink>
        <span class="hidden md:block">
          <NavbarDropdown path={pathname} client:load />
        </span>
        <HeaderLink href="/events" class="hidden md:block">Events</HeaderLink>
        <HeaderLink href="/research" class="hidden md:block">
          Research
        </HeaderLink>
        <HeaderLink href="/news" class="hidden md:block">News</HeaderLink>
      </div>
    </div>
    <div
      id="menu-links"
      class="max-h-0 transition-[max_height] motion-reduce:transition-none ease-in-out duration-500 overflow-hidden flex flex-col space-y-4 md:hidden"
    >
      <HeaderLink class="mt-5" href="/about">About</HeaderLink>
      <button
        id="city-trigger"
        class="inline-flex gap-1 items-center text-gray-900/60 hover:text-gray-900"
      >
        City
        <ChevronDownIcon className="size-3 stroke-current" />
      </button>
      <div
        id="city-links"
        style=`margin-top: 0; grid-template-columns: repeat(${cities.length <= 5 ? 1 : 3}, minmax(0, 1fr))`
        class="grid grid-flow-rows max-h-0 motion-reduce:transition-none transition-[max_height] duration-300 overflow-hidden w-full gap-4 text-base pl-3"
      >
        {
          cities.map((city) => (
            <HeaderLink href={`/${city.toLowerCase()}`}>{city}</HeaderLink>
          ))
        }
      </div>
      <HeaderLink href="/events">Events</HeaderLink>
      <HeaderLink href="/research">Research</HeaderLink>
      <HeaderLink href="/news">News</HeaderLink>
    </div>
  </nav>
</div>
<script>
  const menuTrigger = document.getElementById("menu-trigger");
  const menuLinks = document.getElementById("menu-links");
  const cityTrigger = document.getElementById("city-trigger");
  const cityLinks = document.getElementById("city-links");
  const navbar = document.getElementById("nav");

  const closeAll = () => {
    if (!menuLinks || !menuTrigger) {
      return;
    }

    menuTrigger.children[0].classList.remove("opacity-0");
    menuTrigger.children[1].classList.add("opacity-0");
    menuLinks.style.maxHeight = "0";
    closeCityLinks();
  };

  const closeCityLinks = () => {
    if (!cityTrigger || !cityLinks) {
      return;
    }

    cityTrigger.classList.add("text-gray-900/60");
    cityTrigger.classList.remove("text-gray-900");
    cityLinks.style.maxHeight = "0";
    cityLinks.style.marginTop = "0";
  };

  menuTrigger?.addEventListener("click", () => {
    if (!menuLinks) {
      return;
    }

    if (menuLinks.style.maxHeight === "100vh") {
      closeAll();
    } else {
      menuTrigger.children[1].classList.remove("opacity-0");
      menuTrigger.children[0].classList.add("opacity-0");
      menuLinks.style.maxHeight = "100vh";
    }
  });

  cityTrigger?.addEventListener("click", () => {
    if (!cityLinks) {
      return;
    }

    if (cityLinks.style.maxHeight === "100vh") {
      closeCityLinks();
    } else {
      cityTrigger.classList.remove("text-gray-900/60");
      cityTrigger.classList.add("text-gray-900");
      cityLinks.style.maxHeight = "100vh";
      cityLinks.style.marginTop = "12px";
    }
  });

  const outsideClickListener = (event: MouseEvent) => {
    if (navbar && !navbar.contains(event.target as HTMLElement)) {
      closeAll();
    }
  };

  document.addEventListener("click", outsideClickListener);
</script>
