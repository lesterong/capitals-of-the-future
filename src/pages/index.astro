---
import { getEntry } from "astro:content";
import SectionHeader from "@components/SectionHeader.astro";
import Layout from "../layouts/Layout.astro";
import CityCard from "@components/CityCard.astro";
import { getCollection } from "astro:content";
import Navbar from "@components/Navbar.astro";
import Footer from "@components/Footer.astro";
import { getSortedEvents } from "@utils/eventUtils";
import { getSortedNews } from "@utils/newsUtils";
import { getSortedResearch } from "@utils/researchUtils";
import ContentContainer from "@components/ContentContainer.astro";
import EventList from "@components/EventList.astro";
import NewsList from "@components/NewsList.astro";
import ResearchList from "@components/ResearchList.astro";
import "leaflet/dist/leaflet.css";

const { data: allCities } = await getEntry("city", "cities");
const allEvents = getSortedEvents(await getCollection("event"));
const allNews = getSortedNews(await getCollection("news"));
const allResearch = getSortedResearch(await getCollection("research"));
---

<Layout>
  <Navbar />
  <main>
    <div class="relative h-lvh">
      <div
        class="absolute h-[110lvh] top-0 left-0 right-0 bottom-0 bg-black/45 pointer-events-none z-[9997]"
      >
      </div>
      <div class="absolute top-0 left-0 right-0 bottom-0">
        <div class="h-[110lvh]" id="map"></div>
      </div>
      <div
        class="px-4 h-full flex pt-40 min-[438px]:pt-0 min-[438px]:items-center mx-auto max-w-6xl"
      >
        <div class="w-96 z-[9998] text-white text-center min-[438px]:text-left">
          <h1 class="text-6xl font-bold min-[438px]:text-7xl">
            Capitals of the future
          </h1>
          <p class="mt-8">
            The future of our cities. What's it going to be like?
          </p>
        </div>
      </div>
    </div>
    <ContentContainer
      class={allCities.cities.length > 6
        ? "z-[9998] md:pt-12"
        : " z-[9998] md:pt-6"}
    >
      <div
        class:list={[
          "min-h-lvh flex justify-center",
          { "items-center": allCities.cities.length <= 6 },
        ]}
      >
        <div class="max-w-6xl w-full px-4">
          <SectionHeader title={`${allCities.cities.length} cities`} />
          <p class="font-bold text-5xl">Many connections.</p>
          <div class="mt-14 grid grid-cols-1 md:grid-cols-3 gap-x-4 gap-y-7">
            {allCities.cities.map((city) => <CityCard {...city} />)}
          </div>
        </div>
      </div>
      <div>
        <div
          class:list={[
            "max-w-6xl px-4 mx-auto mt-16",
            allCities.cities.length > 6 ? "md:mt-16" : "md:mt-2",
          ]}
        >
          <EventList events={allEvents} />
          <ResearchList research={allResearch} />
          <NewsList news={allNews} />
        </div>
      </div>
    </ContentContainer>
  </main>
  <Footer />
</Layout>
<script>
  import * as L from "leaflet";
  import cities from "@content/city/cities.json";
  const allCities = cities.cities;

  const map = L.map("map", {
    zoomControl: false,
    scrollWheelZoom: false,
    dragging: false,
  }).setView([0.218, 98.728], 5, {
    animate: false,
  });

  const handleMapPosition = (width: number) => {
    if (width < 438) {
      map.setView([8.218, 109.4], 4, {
        animate: false,
      });
    } else if (width < 968) {
      map.setView([8.218, 109.4], 5, {
        animate: false,
      });
    } else {
      map.setView([0.218, 98.728], 5, {
        animate: false,
      });
    }
  };

  handleMapPosition(document.documentElement.clientWidth);

  window.addEventListener("resize", function (_) {
    handleMapPosition(document.documentElement.clientWidth);
  });

  L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
    maxZoom: 19,
    attribution:
      '&copy; <a href="https://openstreetmap.org/copyright">OpenStreetMap contributors</a>',
  }).addTo(map);

  var dot = L.icon({
    iconUrl: "dot.png",
    iconSize: [20, 20],
    tooltipAnchor: [0, -10],
  });

  allCities.map((city) => {
    const marker = L.marker([city.lat, city.long], { icon: dot })
      .on("click", () => (window.location.href = city.name.toLowerCase()))
      .addTo(map);
    marker.bindTooltip(city.name, {
      direction: "top",
      className: "font-sans text-base",
    });
  });

  const pairs = [];

  for (let i = 0; i < allCities.length; i++) {
    for (let j = i + 1; j < allCities.length; j++) {
      pairs.push([allCities[i], allCities[j]]);
    }
  }

  pairs.map(([cityA, cityB]) => {
    L.polyline(
      [
        [cityA.lat, cityA.long],
        [cityB.lat, cityB.long],
      ],
      {
        color: "black",
        weight: 2,
        dashOffset: "1000",
        dashArray: [1000],
        className: "animate-draw",
      }
    ).addTo(map);
  });
</script>
